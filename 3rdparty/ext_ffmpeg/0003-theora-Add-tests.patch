From 5c85959650d0d93986575b21561e8d25b2d4d77a Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@amyspark.me>
Date: Fri, 25 Nov 2022 21:58:40 +0000
Subject: [PATCH 3/8] theora: Add tests

---
 include/meson.build |   2 +-
 meson.build         |  22 +++++++++
 meson_options.txt   |   1 +
 tests/meson.build   | 113 ++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 137 insertions(+), 1 deletion(-)
 create mode 100644 tests/meson.build

diff --git a/include/meson.build b/include/meson.build
index 21aeb5b..4e1d5fa 100644
--- a/include/meson.build
+++ b/include/meson.build
@@ -10,4 +10,4 @@ install_headers(
     preserve_path: true
 )
 
-incdir = include_directories('.')
+incdir = include_directories('.', '..')
diff --git a/meson.build b/meson.build
index 134e657..ba2465c 100644
--- a/meson.build
+++ b/meson.build
@@ -8,6 +8,26 @@ project(
 
 conf = configuration_data()
 
+enable_valgrind = get_option('valgrind-testing').allowed()
+
+test_env = []
+
+if enable_valgrind
+    valgrind_exe = find_program('valgrind')
+
+    conf.set('HAVE_VALGRIND', valgrind_exe.found())
+
+    if conf.get('HAVE_VALGRIND')
+        test_env += ['-q', '--leak-check=yes', '--show-reachable=yes', '--num-callers=100']
+
+        message('Tests will be run under: @0@'.format(env.get('VALGRIND_ENVIRONMENT')))
+    else
+        warning('Valgrind not found')
+    endif
+else
+    message('Valgrind testing not enabled')
+endif
+
 compile_args = []
 
 cc = meson.get_compiler('c')
@@ -131,6 +151,8 @@ subdir('include')
 
 subdir('lib')
 
+subdir('tests')
+
 theora_dep = declare_dependency(
     link_with : libtheora,
     include_directories : incdir,
diff --git a/meson_options.txt b/meson_options.txt
index afe577c..26b839b 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -1,3 +1,4 @@
+option('valgrind-testing', type: 'feature', value: 'disabled', description: 'Enable running of tests inside Valgrind')
 option('asm', type: 'feature', value: 'enabled', description: 'Enable assembly optimizations')
 option('asflag-probe', type: 'feature', value: 'enabled', description: 'Enable instructions not supported by the default assembler flags (Arm only).')
 option('collect-metrics', type: 'feature', value: 'disabled', description: 'Enable metrics collection for mode training')
diff --git a/tests/meson.build b/tests/meson.build
new file mode 100644
index 0000000..3f25f23
--- /dev/null
+++ b/tests/meson.build
@@ -0,0 +1,113 @@
+theora_libs = [libtheora]
+theoradec_libs = [libtheoradec]
+theoraenc_libs = [libtheoraenc, libtheoradec]
+
+tests = {}
+
+# dummy call tests for the current api
+noop = executable(
+    'noop',
+    files('noop.c'),
+    link_with: theoraenc_libs,
+    dependencies: [m_dep, ogg_dep, config_dep],
+    include_directories: incdir,
+)
+
+tests += {'noop': noop}
+
+# dummy call tests for the pre-1.0 legacy api with current link line
+noop_theoraenc = executable(
+    'noop_theoraenc',
+    files('noop_theora.c'),
+    link_with: theoraenc_libs,
+    dependencies: [m_dep, ogg_dep, config_dep],
+    include_directories: incdir,
+)
+
+tests += {'noop_theoraenc': noop_theoraenc}
+
+# dummy call tests for the pre-1.0 legacy api with legacy link line
+noop_theora = executable(
+    'noop_theora',
+    files('noop_theora.c'),
+    link_with: theora_libs,
+    dependencies: [m_dep, ogg_dep, config_dep],
+    include_directories: incdir,
+)
+
+tests += {'noop_theora': noop_theora}
+
+# comment utilities for the current api
+comment = executable(
+    'comment',
+    files('comment.c'),
+    link_with: theoradec_libs,
+    dependencies: [m_dep, ogg_dep, config_dep],
+    include_directories: incdir,
+)
+
+tests += {'comment': comment}
+
+# comment utilities for the legacy api and current lib
+comment_theoradec = executable(
+    'comment_theoradec',
+    files('comment.c'),
+    link_with: theoradec_libs,
+    dependencies: [m_dep, ogg_dep, config_dep],
+    include_directories: incdir,
+)
+
+tests += {'comment_theoradec': comment_theoradec}
+
+# comment utilities for the legacy api and legacy lib
+comment_theora = executable(
+    'comment_theora',
+    files('comment_theora.c'),
+    link_with: theora_libs,
+    dependencies: [m_dep, ogg_dep, config_dep],
+    include_directories: incdir,
+)
+
+tests += {'comment_theora': comment_theora}
+
+granulepos = executable(
+    'granulepos',
+    files('granulepos.c'),
+    link_with: theoraenc_libs,
+    dependencies: [m_dep, ogg_dep, config_dep],
+    include_directories: incdir,
+)
+
+tests += {'granulepos': granulepos}
+
+granulepos_theoraenc = executable(
+    'granulepos_theoraenc',
+    files('granulepos_theora.c'),
+    link_with: theoraenc_libs,
+    dependencies: [m_dep, ogg_dep, config_dep],
+    include_directories: incdir,
+)
+
+tests += {'granulepos_theoraenc': granulepos_theoraenc}
+
+granulepos_theora = executable(
+    'granulepos_theora',
+    files('granulepos_theora.c'),
+    link_with: theora_libs,
+    dependencies: [m_dep, ogg_dep, config_dep],
+    include_directories: incdir,
+)
+
+tests += {'granulepos_theora': granulepos_theora}
+
+foreach name, exe : tests
+    if conf.get('HAVE_VALGRIND', false)
+        test(
+            name,
+            valgrind_exe,
+            args: test_env + exe
+        )
+    else
+        test(name, exe)
+    endif
+endforeach
-- 
2.37.1.windows.1

