From d71a8f9e7e1d73216fd7760f8584530b7c621c89 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@amyspark.me>
Date: Fri, 25 Nov 2022 16:16:02 -0300
Subject: [PATCH 2/8] theora: Add Arm support

---
 lib/arm/arm2gnu-wrapper.py | 14 ++++++++
 lib/meson.build            | 49 ++++++++++++++++++++++++++++
 meson.build                | 66 ++++++++++++++++++++++++++++++++++++++
 meson_options.txt          |  1 +
 4 files changed, 130 insertions(+)
 create mode 100644 lib/arm/arm2gnu-wrapper.py

diff --git a/lib/arm/arm2gnu-wrapper.py b/lib/arm/arm2gnu-wrapper.py
new file mode 100644
index 0000000..8a0071a
--- /dev/null
+++ b/lib/arm/arm2gnu-wrapper.py
@@ -0,0 +1,14 @@
+#!/usr/bin/env python3
+
+from argparse import ArgumentParser
+from pathlib import Path
+from subprocess import run
+
+if __name__ == '__main__':
+    parser = ArgumentParser(description='Wraps around the Perl script to pipe input and output')
+    parser.add_argument('--program', help="Line to feed to subprocess.run as program")
+    parser.add_argument('infile', type=Path, help='Source file')
+    parser.add_argument('outfile', type=Path, help='Destination file')
+    args = parser.parse_args()
+
+    run(args.program.split(), stdin=args.infile.open(), stdout=args.outfile.open(), check=True)
diff --git a/lib/meson.build b/lib/meson.build
index 6cc02a3..7a7b947 100644
--- a/lib/meson.build
+++ b/lib/meson.build
@@ -109,6 +109,55 @@ if asm
                 'x86_vc/x86state.c',
             )
         endif
+    elif conf.get('CPU_arm', false) and cc.get_id() != 'msvc'
+        # The Arm bits require the Arm -> GNU conversion script
+
+        arm2gnu_pl = find_program('../arm/arm2gnu.pl')
+        arm2gnu_py = find_program('../arm/arm2gnu-wrapper.py')
+
+        arm2gnu_gen = generator(
+            arm2gnu_py,
+            arguments: [arm2gnu_pl, '@INPUT@', '@OUTPUT@'],
+            output: '@BASENAME@-gnu.S'
+        )
+
+        arm_opts_s = configure_file(
+            input: 'arm/armopts.s.in',
+            configuration: conf,
+            output: 'armopts.S'
+        )
+
+        common_arm_sources = generator.process(
+            files(
+                'arm/armbits.s',
+                'arm/armfrag.s',
+                'arm/armidct.s',
+                'arm/armloop.s'
+            ),
+            arm_opts_s
+        )
+
+        encoder_sources += common_arm_sources
+
+        encoder_sources += generator.process(
+            files(
+                'arm/armencfrag.s',
+                'arm/armencquant.s',
+            )
+        )
+
+        encoder_sources += files(
+            'arm/armcpu.c',
+            'arm/armenc.c',
+            'arm/armstate.c',
+        )
+
+        decoder_sources += common_arm_sources
+
+        decoder_sources += files(
+            'arm/armcpu.c',
+            'arm/armstate.c',
+        )
     endif
 endif
 
diff --git a/meson.build b/meson.build
index 6c87890..134e657 100644
--- a/meson.build
+++ b/meson.build
@@ -35,6 +35,7 @@ ogg_dep = dependency('ogg',
 vorbis_dep = dependency('vorbis', version: '>= 1.0.1', required: false)
 
 asm = get_option('asm').allowed()
+enable_asflag_probe = get_option('asflag-probe').allowed()
 if asm 
     if host_machine.cpu_family() == 'x86_64'
         conf.set('CPU_x86_64', true)
@@ -44,6 +45,71 @@ if asm
         endif
     elif host_machine.cpu_family() == 'x86'
         conf.set('OC_X86_ASM', true)
+    elif host_machine.cpu_family() == 'arm' or host_machine.cpu_family() == 'aarch64'
+        conf.set('CPU_arm', true)
+        if cc.get_id() != 'msvc'
+            conf.set('OC_ARM_ASM', true)
+        endif
+    endif
+
+    if cc.get_argument_syntax() != 'msvc' and conf.get('CPU_arm', false)
+        # The following checks were only designed for GNU AS.
+        # Perl is needed for the arm2gnu reformatter.
+        perl_exe = find_program('perl', required: false)
+
+        if perl_exe.found()
+            conf.set('HAVE_PERL', true)
+        else
+            warning('*** ARM assembly requires perl -- disabling optimizations')
+            conf.set('HAVE_PERL', false)
+        endif
+
+        if enable_asflag_probe and conf.get('HAVE_PERL')
+            assembler_checks = [
+                [
+                    'HAVE_ARM_ASM_NEON',
+                    '''.file configure
+                        vorr d0,d0,d0
+                    ''',
+                    ['-mfpu=neon', '-march=armv7-a'],
+                    'OC_ARM_ASM_EDSP',
+                    'if assembler supports NEON instructions on ARM'
+                ],
+                [
+                    'HAVE_ARM_ASM_MEDIA',
+                    '''.file configure
+                        shadd8 r3,r3,r3
+                    ''',
+                    ['-march=armv6j'],
+                    'OC_ARM_ASM_MEDIA',
+                    'if assembler supports ARMv6 media instructions on ARM'],
+                [
+                    'HAVE_ARM_ASM_EDSP',
+                    '''.file configure
+                        qadd r3,r3,r3
+                    ''',
+                    ['-march=armv5e'],
+                    'OC_ARM_ASM_EDSP',
+                    'if assembler supports EDSP instructions on ARM'
+                ]
+            ]
+
+            foreach check : checks
+                if cc.compiles(check[1],
+                    args: ['-x', 'assembler'],
+                    name: checks[4]
+                ) 
+                    conf.set(check[3], true)
+                else
+                    if cc.compiles(check[1],
+                        args: ['-x', 'assembler'] + check[2],
+                        name: checks[4]
+                    )
+                        conf.set(check[3], true)
+                    endif
+                endif
+            endforeach
+        endif
     endif
 endif
 
diff --git a/meson_options.txt b/meson_options.txt
index c214799..afe577c 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -1,2 +1,3 @@
 option('asm', type: 'feature', value: 'enabled', description: 'Enable assembly optimizations')
+option('asflag-probe', type: 'feature', value: 'enabled', description: 'Enable instructions not supported by the default assembler flags (Arm only).')
 option('collect-metrics', type: 'feature', value: 'disabled', description: 'Enable metrics collection for mode training')
-- 
2.37.1.windows.1

